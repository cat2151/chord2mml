// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/

"use strict";


    function getOffsetByScale(scale, degree) {
        return getOffsetsByScale(scale)[getDegreeIndex(degree)];
    }

    function getOffsetsByScale(scale) {
        switch (scale) {
        case "ionian":     return [0,2,4,5,7,9,11];
        case "dorian":     return [0,2,3,5,7,9,10];
        case "phrygian":   return [0,1,3,5,7,8,10];
        case "lydian":     return [0,2,4,6,7,9,11];
        case "mixolydian": return [0,2,4,5,7,9,10];
        case "aeolian":    return [0,2,3,5,7,8,10];
        case "locrian":    return [0,1,3,5,6,8,10];
        default: throw new Error(`ERROR : getOffsetsByScale`);
        }
    }

    function getDegreeIndex(degree) {
        switch (degree) {
        case 'I':   return 0;
        case 'II':  return 1;
        case 'III': return 2;
        case 'IV':  return 3;
        case 'V':   return 4;
        case 'VI':  return 5;
        case 'VII': return 6;
        default: throw new Error(`ERROR : getDegreeIndex`);
        }
    }

    function getRootCdefgabOffset(root, sharp, flat) {
        let offset;
        switch (root) {
        case 'C': offset =  0; break;
        case 'D': offset =  2; break;
        case 'E': offset =  4; break;
        case 'F': offset =  5; break;
        case 'G': offset =  7; break;
        case 'A': offset =  9; break;
        case 'B': offset = 11; break;
        default: throw new Error(`ERROR : getRootCdefgabOffset`);
        }
        offset += sharp.length - flat.length;
        return offset;
    }

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { CHORDS: peg$parseCHORDS };
  var peg$startRuleFunction = peg$parseCHORDS;

  var peg$c0 = "/";
  var peg$c1 = "on";
  var peg$c2 = "over";
  var peg$c3 = "chord over bass note";
  var peg$c4 = "slash chord inversion";
  var peg$c5 = "upper structure triad";
  var peg$c6 = "upper structure";
  var peg$c7 = "ust";
  var peg$c8 = "us";
  var peg$c9 = "polychord";
  var peg$c10 = "poly";
  var peg$c11 = "/*";
  var peg$c12 = "*/";
  var peg$c13 = "root inv";
  var peg$c14 = "1st inv";
  var peg$c15 = "2nd inv";
  var peg$c16 = "3rd inv";
  var peg$c17 = "close harmony";
  var peg$c18 = "close";
  var peg$c19 = "drop2";
  var peg$c20 = "drop-2";
  var peg$c21 = "open triad";
  var peg$c22 = "drop4";
  var peg$c23 = "drop-4";
  var peg$c24 = "drop2and4";
  var peg$c25 = "drop-2-and-4";
  var peg$c26 = "no bass";
  var peg$c27 = "bass is root";
  var peg$c28 = "bass plays root";
  var peg$c29 = "bass play root";
  var peg$c30 = "bpm";
  var peg$c31 = "tempo";
  var peg$c32 = "|";
  var peg$c33 = " / ";
  var peg$c34 = "key";
  var peg$c35 = "ionian";
  var peg$c36 = "dorian";
  var peg$c37 = "phrygian";
  var peg$c38 = "lydian";
  var peg$c39 = "mixolydian";
  var peg$c40 = "aeolian";
  var peg$c41 = "locrian";
  var peg$c42 = "octave";
  var peg$c43 = "up";
  var peg$c44 = "down";
  var peg$c45 = "VII";
  var peg$c46 = "III";
  var peg$c47 = "VI";
  var peg$c48 = "IV";
  var peg$c49 = "II";
  var peg$c50 = "V";
  var peg$c51 = "I";
  var peg$c52 = "maj";
  var peg$c53 = "M";
  var peg$c54 = "maj7";
  var peg$c55 = "M7";
  var peg$c56 = "\u25B3";
  var peg$c57 = "min";
  var peg$c58 = "m";
  var peg$c59 = "-";
  var peg$c60 = "min7";
  var peg$c61 = "m7";
  var peg$c62 = "-7";
  var peg$c63 = "6";
  var peg$c64 = "7";
  var peg$c65 = "9";
  var peg$c66 = "11";
  var peg$c67 = "13";
  var peg$c68 = "sus2";
  var peg$c69 = "sus4";
  var peg$c70 = "7sus2";
  var peg$c71 = "7sus4";
  var peg$c72 = "dim";
  var peg$c73 = "aug";
  var peg$c74 = "(b5)";
  var peg$c75 = "(-5)";
  var peg$c76 = "(+5)";
  var peg$c77 = "(#5)";
  var peg$c78 = "(";
  var peg$c79 = "omit";
  var peg$c80 = "o";
  var peg$c81 = ")";
  var peg$c82 = "add";
  var peg$c83 = "^";
  var peg$c84 = "'";
  var peg$c85 = ",";
  var peg$c86 = " - ";
  var peg$c87 = "\u2192";
  var peg$c88 = "Strings";
  var peg$c89 = "Ensemble";
  var peg$c90 = "1";
  var peg$c91 = "Str.";
  var peg$c92 = "2";
  var peg$c93 = "voice aahs";
  var peg$c94 = "choir aahs";
  var peg$c95 = "choir";
  var peg$c96 = "chor.";

  var peg$r0 = /^[,.]/;
  var peg$r1 = /^[^*\/]/;
  var peg$r2 = /^[0-9]/;
  var peg$r3 = /^[ =]/;
  var peg$r4 = /^[A-G]/;
  var peg$r5 = /^[ \-]/;
  var peg$r6 = /^[#\uFF03\u266F]/;
  var peg$r7 = /^[b\u266D]/;
  var peg$r8 = /^[135]/;
  var peg$r9 = /^[0-3]/;
  var peg$r10 = /^[ \t\n\r]/;

  var peg$e0 = peg$literalExpectation("/", false);
  var peg$e1 = peg$literalExpectation("on", false);
  var peg$e2 = peg$literalExpectation("over", false);
  var peg$e3 = peg$literalExpectation("chord over bass note", true);
  var peg$e4 = peg$classExpectation([",", "."], false, false);
  var peg$e5 = peg$literalExpectation("slash chord inversion", true);
  var peg$e6 = peg$literalExpectation("upper structure triad", true);
  var peg$e7 = peg$literalExpectation("upper structure", true);
  var peg$e8 = peg$literalExpectation("UST", true);
  var peg$e9 = peg$literalExpectation("US", true);
  var peg$e10 = peg$literalExpectation("polychord", true);
  var peg$e11 = peg$literalExpectation("poly", true);
  var peg$e12 = peg$literalExpectation("/*", false);
  var peg$e13 = peg$classExpectation(["*", "/"], true, false);
  var peg$e14 = peg$literalExpectation("*/", false);
  var peg$e15 = peg$literalExpectation("root inv", true);
  var peg$e16 = peg$literalExpectation("1st inv", true);
  var peg$e17 = peg$literalExpectation("2nd inv", true);
  var peg$e18 = peg$literalExpectation("3rd inv", true);
  var peg$e19 = peg$literalExpectation("close harmony", true);
  var peg$e20 = peg$literalExpectation("close", true);
  var peg$e21 = peg$literalExpectation("drop2", true);
  var peg$e22 = peg$literalExpectation("drop-2", true);
  var peg$e23 = peg$literalExpectation("open triad", true);
  var peg$e24 = peg$literalExpectation("drop4", true);
  var peg$e25 = peg$literalExpectation("drop-4", true);
  var peg$e26 = peg$literalExpectation("drop2and4", true);
  var peg$e27 = peg$literalExpectation("drop-2-and-4", true);
  var peg$e28 = peg$literalExpectation("no bass", true);
  var peg$e29 = peg$literalExpectation("bass is root", true);
  var peg$e30 = peg$literalExpectation("bass plays root", true);
  var peg$e31 = peg$literalExpectation("bass play root", true);
  var peg$e32 = peg$literalExpectation("BPM", true);
  var peg$e33 = peg$literalExpectation("TEMPO", true);
  var peg$e34 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e35 = peg$literalExpectation("|", false);
  var peg$e36 = peg$literalExpectation(" / ", false);
  var peg$e37 = peg$literalExpectation("key", true);
  var peg$e38 = peg$classExpectation([" ", "="], false, false);
  var peg$e39 = peg$classExpectation([["A", "G"]], false, false);
  var peg$e40 = peg$literalExpectation("ionian", true);
  var peg$e41 = peg$literalExpectation("dorian", true);
  var peg$e42 = peg$literalExpectation("phrygian", true);
  var peg$e43 = peg$literalExpectation("lydian", true);
  var peg$e44 = peg$literalExpectation("mixolydian", true);
  var peg$e45 = peg$literalExpectation("aeolian", true);
  var peg$e46 = peg$literalExpectation("locrian", true);
  var peg$e47 = peg$literalExpectation("octave", true);
  var peg$e48 = peg$classExpectation([" ", "-"], false, false);
  var peg$e49 = peg$literalExpectation("up", true);
  var peg$e50 = peg$literalExpectation("down", true);
  var peg$e51 = peg$literalExpectation("VII", false);
  var peg$e52 = peg$literalExpectation("III", false);
  var peg$e53 = peg$literalExpectation("VI", false);
  var peg$e54 = peg$literalExpectation("IV", false);
  var peg$e55 = peg$literalExpectation("II", false);
  var peg$e56 = peg$literalExpectation("V", false);
  var peg$e57 = peg$literalExpectation("I", false);
  var peg$e58 = peg$classExpectation(["#", "\uFF03", "\u266F"], false, false);
  var peg$e59 = peg$classExpectation(["b", "\u266D"], false, false);
  var peg$e60 = peg$literalExpectation("maj", true);
  var peg$e61 = peg$literalExpectation("M", false);
  var peg$e62 = peg$literalExpectation("maj7", true);
  var peg$e63 = peg$literalExpectation("M7", false);
  var peg$e64 = peg$literalExpectation("\u25B3", false);
  var peg$e65 = peg$literalExpectation("min", true);
  var peg$e66 = peg$literalExpectation("m", false);
  var peg$e67 = peg$literalExpectation("-", false);
  var peg$e68 = peg$literalExpectation("min7", true);
  var peg$e69 = peg$literalExpectation("m7", false);
  var peg$e70 = peg$literalExpectation("-7", false);
  var peg$e71 = peg$literalExpectation("6", false);
  var peg$e72 = peg$literalExpectation("7", false);
  var peg$e73 = peg$literalExpectation("9", false);
  var peg$e74 = peg$literalExpectation("11", false);
  var peg$e75 = peg$literalExpectation("13", false);
  var peg$e76 = peg$literalExpectation("sus2", false);
  var peg$e77 = peg$literalExpectation("sus4", false);
  var peg$e78 = peg$literalExpectation("7sus2", false);
  var peg$e79 = peg$literalExpectation("7sus4", false);
  var peg$e80 = peg$literalExpectation("dim", false);
  var peg$e81 = peg$literalExpectation("aug", false);
  var peg$e82 = peg$literalExpectation("(b5)", false);
  var peg$e83 = peg$literalExpectation("(-5)", false);
  var peg$e84 = peg$literalExpectation("(+5)", false);
  var peg$e85 = peg$literalExpectation("(#5)", false);
  var peg$e86 = peg$literalExpectation("(", false);
  var peg$e87 = peg$literalExpectation("omit", false);
  var peg$e88 = peg$literalExpectation("o", false);
  var peg$e89 = peg$classExpectation(["1", "3", "5"], false, false);
  var peg$e90 = peg$literalExpectation(")", false);
  var peg$e91 = peg$literalExpectation("add", false);
  var peg$e92 = peg$literalExpectation("^", false);
  var peg$e93 = peg$classExpectation([["0", "3"]], false, false);
  var peg$e94 = peg$literalExpectation("'", false);
  var peg$e95 = peg$literalExpectation(",", false);
  var peg$e96 = peg$otherExpectation("whitespace");
  var peg$e97 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
  var peg$e98 = peg$otherExpectation("hyphen");
  var peg$e99 = peg$literalExpectation(" - ", false);
  var peg$e100 = peg$literalExpectation("\u2192", false);
  var peg$e101 = peg$literalExpectation("Strings", false);
  var peg$e102 = peg$literalExpectation("Ensemble", false);
  var peg$e103 = peg$literalExpectation("1", true);
  var peg$e104 = peg$literalExpectation("1", false);
  var peg$e105 = peg$literalExpectation("Str.", false);
  var peg$e106 = peg$literalExpectation("2", true);
  var peg$e107 = peg$literalExpectation("2", false);
  var peg$e108 = peg$literalExpectation("Voice Aahs", true);
  var peg$e109 = peg$literalExpectation("Choir Aahs", true);
  var peg$e110 = peg$literalExpectation("Choir", true);
  var peg$e111 = peg$literalExpectation("Chor.", true);

  var peg$f0 = function(event) { return event; };
  var peg$f1 = function(root, quality, inversion, octaveOffset) { return { event: "chord", root, quality, inversion, octaveOffset }; };
  var peg$f2 = function(upperRoot, upperQuality, upperInversion, upperOctaveOffset, lowerRoot, lowerQuality, lowerInversion, lowerOctaveOffset) {
    lowerRoot ??= upperRoot;
    lowerQuality ??= upperQuality;
    return { event: "slash chord", upperRoot, upperQuality, upperInversion, upperOctaveOffset, lowerRoot, lowerQuality, lowerInversion, lowerOctaveOffset }; };
  var peg$f3 = function(upperRoot, upperQuality, upperInversion, upperOctaveOffset, lowerRoot, lowerQuality, lowerInversion, lowerOctaveOffset) {
    lowerRoot ??= upperRoot;
    lowerQuality ??= upperQuality;
    return { event: "chord over bass note", upperRoot, upperQuality, upperInversion, upperOctaveOffset, lowerRoot, lowerQuality, lowerInversion, lowerOctaveOffset }; };
  var peg$f4 = function() { return { event: "change slash chord mode to chord over bass note" }; };
  var peg$f5 = function() { return { event: "change slash chord mode to inversion" }; };
  var peg$f6 = function() {
    return { event: "change slash chord mode to polychord" }; };
  var peg$f7 = function(mml) { return { event: "inline mml", mml: mml.join("") }; };
  var peg$f8 = function() { return { event: "change inversion mode to root inv" }; };
  var peg$f9 = function() { return { event: "change inversion mode to 1st inv" }; };
  var peg$f10 = function() { return { event: "change inversion mode to 2nd inv" }; };
  var peg$f11 = function() { return { event: "change inversion mode to 3rd inv" }; };
  var peg$f12 = function() { return { event: "change open harmony mode to close" }; };
  var peg$f13 = function() { return { event: "change open harmony mode to drop2" }; };
  var peg$f14 = function() { return { event: "change open harmony mode to drop4" }; };
  var peg$f15 = function() { return { event: "change open harmony mode to drop2and4" }; };
  var peg$f16 = function() { return { event: "change bass play mode to no bass" }; };
  var peg$f17 = function() { return { event: "change bass play mode to root" }; };
  var peg$f18 = function(bpm) { return { event: "inline mml", mml: "t" + bpm.join("") }; };
  var peg$f19 = function() { return { event: "bar" }; };
  var peg$f20 = function() { return { event: "bar slash" }; };
  var peg$f21 = function(k) { return k; };
  var peg$f22 = function(root, sharp, flat) {
    gKey = getRootCdefgabOffset(root, sharp, flat);
    return { event: "key", root, sharpLength: sharp.length, flatLength: flat.length, offset: gKey }; };
  var peg$f23 = function(s) { gScale = s.toLowerCase(); return { event: "scale", offsets: getOffsetsByScale(gScale) }; };
  var peg$f24 = function() { return { event: "octave up" }; };
  var peg$f25 = function() { return { event: "octave up upper" }; };
  var peg$f26 = function() { return { event: "octave up lower" }; };
  var peg$f27 = function() { return { event: "octave down" }; };
  var peg$f28 = function() { return { event: "octave down upper" }; };
  var peg$f29 = function() { return { event: "octave down lower" }; };
  var peg$f30 = function(root, sharp, flat) { return getRootCdefgabOffset(root, sharp, flat); };
  var peg$f31 = function(sharp, flat, degree) { // 文字数の多い順に並べるのは、そうしないとVIをV Iと認識するので防止用
    // 課題。getOffsetByScale() と関連関数がやや大規模。当ライブラリの方針的に、AST生成側の分担としては大規模すぎる感触。
    //  対策、このまま進んで様子見する。
    //   根拠、ここでやる理由は、ROOT部分に影響範囲を閉じるため。ここ以外でやると、chord, chord over bass note, などそれぞれのdegree版を作ることになり影響範囲が広いため。
	let offset = getOffsetByScale(gScale, degree);
    offset += sharp.length - flat.length + gKey;
    return offset; };
  var peg$f32 = function() { return "#"; };
  var peg$f33 = function() { return "b"; };
  var peg$f34 = function(quality) {
    return quality.join(""); };
  var peg$f35 = function() { return "maj"; };
  var peg$f36 = function() { return "maj"; };
  var peg$f37 = function() { return "maj7"; };
  var peg$f38 = function() { return "min"; };
  var peg$f39 = function() { return "min"; };
  var peg$f40 = function() { return "min7"; };
  var peg$f41 = function() { return "6"; };
  var peg$f42 = function() { return "7"; };
  var peg$f43 = function() { return "9"; };
  var peg$f44 = function() { return "11"; };
  var peg$f45 = function() { return "13"; };
  var peg$f46 = function() { return "sus2"; };
  var peg$f47 = function() { return "sus4"; };
  var peg$f48 = function() { return "7sus2"; };
  var peg$f49 = function() { return "7sus4"; };
  var peg$f50 = function() { return "dim triad"; };
  var peg$f51 = function() { return "aug"; };
  var peg$f52 = function() { return ",flatted fifth"; };
  var peg$f53 = function() { return ",augmented fifth"; };
  var peg$f54 = function(n) { return ",omit" + n; };
  var peg$f55 = function(n) { return ",add" + n.join(""); };
  var peg$f56 = function() {
    switch (text()) {
        case "": return null; // inversion modeのままとする用
        case "^0": return "root inv"; // inversion modeで1st～3rdが指定されていたときに、それを打ち消してroot invにする用
        case "^1": return "1st inv";
        case "^2": return "2nd inv";
        case "^3": return "3rd inv";
        default: throw new Error(`ERROR : INVERSION`);
    }
};
  var peg$f57 = function(up, down) { return up.length - down.length; };
  var peg$f58 = function() { return { event: "inline mml", mml: "@48" }; };
  var peg$f59 = function() { return { event: "inline mml", mml: "@49" }; };
  var peg$f60 = function() { return { event: "inline mml", mml: "@52" }; };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseCHORDS() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseEVENT();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseEVENT();
    }
    s2 = peg$parse_();
    peg$savedPos = s0;
    s0 = peg$f0(s1);

    return s0;
  }

  function peg$parseEVENT() {
    var s0;

    s0 = peg$parseINLINE_MML();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBAR_SLASH();
      if (s0 === peg$FAILED) {
        s0 = peg$parseMIDI_PROGRAM_CHANGE();
        if (s0 === peg$FAILED) {
          s0 = peg$parseTEMPO();
          if (s0 === peg$FAILED) {
            s0 = peg$parseOCTAVE_UP_UPPER();
            if (s0 === peg$FAILED) {
              s0 = peg$parseOCTAVE_DOWN_UPPER();
              if (s0 === peg$FAILED) {
                s0 = peg$parseOCTAVE_UP_LOWER();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseOCTAVE_DOWN_LOWER();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseOCTAVE_UP();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseOCTAVE_DOWN();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseSLASH_CHORD_MODE_CHORD_OVER_BASS_NOTE();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseSLASH_CHORD_MODE_POLYCHORD();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseSLASH_CHORD_MODE_INVERSION();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parseSLASH_CHORD();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseON_CHORD();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parseINVERSION_MODE_ROOT_INV();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseINVERSION_MODE_1ST_INV();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parseINVERSION_MODE_2ND_INV();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parseINVERSION_MODE_3RD_INV();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parseOPEN_HARMONY_MODE_DROP2AND4();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parseOPEN_HARMONY_MODE_DROP4();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parseOPEN_HARMONY_MODE_DROP2();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseOPEN_HARMONY_MODE_CLOSE();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseBASS_PLAY_MODE_NO_BASS();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parseBASS_PLAY_MODE_ROOT();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseSCALE();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseKEY();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseCHORD();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parseBAR();
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseCHORD() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseROOT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseCHORD_QUALITY();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseINVERSION();
        s5 = peg$parseOCTAVE_OFFSET();
        s6 = peg$parseH();
        peg$savedPos = s0;
        s0 = peg$f1(s2, s3, s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSLASH_CHORD() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseROOT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseCHORD_QUALITY();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseINVERSION();
        s5 = peg$parseOCTAVE_OFFSET();
        if (input.charCodeAt(peg$currPos) === 47) {
          s6 = peg$c0;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e0); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseROOT();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parseCHORD_QUALITY();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parseINVERSION();
          s10 = peg$parseOCTAVE_OFFSET();
          s11 = peg$parseH();
          peg$savedPos = s0;
          s0 = peg$f2(s2, s3, s4, s5, s7, s8, s9, s10);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseON_CHORD() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseROOT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseCHORD_QUALITY();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseINVERSION();
        s5 = peg$parseOCTAVE_OFFSET();
        if (input.substr(peg$currPos, 2) === peg$c1) {
          s6 = peg$c1;
          peg$currPos += 2;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e1); }
        }
        if (s6 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c2) {
            s6 = peg$c2;
            peg$currPos += 4;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseROOT();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          s8 = peg$parseCHORD_QUALITY();
          if (s8 === peg$FAILED) {
            s8 = null;
          }
          s9 = peg$parseINVERSION();
          s10 = peg$parseOCTAVE_OFFSET();
          s11 = peg$parseH();
          peg$savedPos = s0;
          s0 = peg$f3(s2, s3, s4, s5, s7, s8, s9, s10);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSLASH_CHORD_MODE_CHORD_OVER_BASS_NOTE() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 20).toLowerCase() === peg$c3) {
      s2 = input.substr(peg$currPos, 20);
      peg$currPos += 20;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f4();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSLASH_CHORD_MODE_INVERSION() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 21).toLowerCase() === peg$c4) {
      s2 = input.substr(peg$currPos, 21);
      peg$currPos += 21;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f5();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSLASH_CHORD_MODE_POLYCHORD() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 21).toLowerCase() === peg$c5) {
      s2 = input.substr(peg$currPos, 21);
      peg$currPos += 21;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 15).toLowerCase() === peg$c6) {
        s2 = input.substr(peg$currPos, 15);
        peg$currPos += 15;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c7) {
          s2 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c8) {
            s2 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c9) {
              s2 = input.substr(peg$currPos, 9);
              peg$currPos += 9;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e10); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c10) {
                s2 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e11); }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f6();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINLINE_MML() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c11) {
      s1 = peg$c11;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$r1.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s3 = peg$c12;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f7(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINVERSION_MODE_ROOT_INV() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c13) {
      s2 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f8();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINVERSION_MODE_1ST_INV() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c14) {
      s2 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f9();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINVERSION_MODE_2ND_INV() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c15) {
      s2 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f10();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINVERSION_MODE_3RD_INV() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c16) {
      s2 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f11();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOPEN_HARMONY_MODE_CLOSE() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c17) {
      s2 = input.substr(peg$currPos, 13);
      peg$currPos += 13;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c18) {
        s2 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f12();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOPEN_HARMONY_MODE_DROP2() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c19) {
      s2 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c20) {
        s2 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c21) {
          s2 = input.substr(peg$currPos, 10);
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f13();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOPEN_HARMONY_MODE_DROP4() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c22) {
      s2 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c23) {
        s2 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f14();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOPEN_HARMONY_MODE_DROP2AND4() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c24) {
      s2 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c25) {
        s2 = input.substr(peg$currPos, 12);
        peg$currPos += 12;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f15();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBASS_PLAY_MODE_NO_BASS() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c26) {
      s2 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f16();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBASS_PLAY_MODE_ROOT() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c27) {
      s2 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 15).toLowerCase() === peg$c28) {
        s2 = input.substr(peg$currPos, 15);
        peg$currPos += 15;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c29) {
          s2 = input.substr(peg$currPos, 14);
          peg$currPos += 14;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f17();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseTEMPO() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c30) {
      s2 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c31) {
        s2 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s5 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e34); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f18(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBAR() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 124) {
      s2 = peg$c32;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f19();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBAR_SLASH() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c33) {
      s1 = peg$c33;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f20();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseKEY() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c34) {
      s2 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseKEY_EVENT();
      if (s4 !== peg$FAILED) {
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f21(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseKEY_EVENT() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSHARP();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSHARP();
      }
      s3 = [];
      s4 = peg$parseFLAT();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseFLAT();
      }
      peg$savedPos = s0;
      s0 = peg$f22(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSCALE() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c35) {
      s2 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c36) {
        s2 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c37) {
          s2 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c38) {
            s2 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e43); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 10).toLowerCase() === peg$c39) {
              s2 = input.substr(peg$currPos, 10);
              peg$currPos += 10;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e44); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c40) {
                s2 = input.substr(peg$currPos, 7);
                peg$currPos += 7;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e45); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c41) {
                  s2 = input.substr(peg$currPos, 7);
                  peg$currPos += 7;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e46); }
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f23(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOCTAVE_UP() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c42) {
      s3 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s3 !== peg$FAILED) {
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c43) {
          s5 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f24();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOCTAVE_UP_UPPER() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c42) {
      s3 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s3 !== peg$FAILED) {
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c43) {
          s5 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 !== peg$FAILED) {
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f25();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOCTAVE_UP_LOWER() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 47) {
      s2 = peg$c0;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c42) {
        s4 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s4 !== peg$FAILED) {
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e48); }
        }
        if (s5 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c43) {
            s6 = input.substr(peg$currPos, 2);
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e49); }
          }
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f26();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOCTAVE_DOWN() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c42) {
      s3 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s3 !== peg$FAILED) {
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c44) {
          s5 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e50); }
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f27();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOCTAVE_DOWN_UPPER() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c42) {
      s3 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s3 !== peg$FAILED) {
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s4 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c44) {
          s5 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e50); }
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s3 !== peg$FAILED) {
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f28();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOCTAVE_DOWN_LOWER() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 47) {
      s2 = peg$c0;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c42) {
        s4 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s4 !== peg$FAILED) {
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e48); }
        }
        if (s5 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c44) {
            s6 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
          if (s6 !== peg$FAILED) {
            s4 = [s4, s5, s6];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s5 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f29();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseROOT() {
    var s0;

    s0 = peg$parseROOT_CDEFGAB();
    if (s0 === peg$FAILED) {
      s0 = peg$parseROOT_DEGREE();
    }

    return s0;
  }

  function peg$parseROOT_CDEFGAB() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseSHARP();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseSHARP();
      }
      s3 = [];
      s4 = peg$parseFLAT();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseFLAT();
      }
      peg$savedPos = s0;
      s0 = peg$f30(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseROOT_DEGREE() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseSHARP();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseSHARP();
    }
    s2 = [];
    s3 = peg$parseFLAT();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseFLAT();
    }
    if (input.substr(peg$currPos, 3) === peg$c45) {
      s3 = peg$c45;
      peg$currPos += 3;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s3 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c46) {
        s3 = peg$c46;
        peg$currPos += 3;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s3 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c47) {
          s3 = peg$c47;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e53); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c48) {
            s3 = peg$c48;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e54); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c49) {
              s3 = peg$c49;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e55); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 86) {
                s3 = peg$c50;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e56); }
              }
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 73) {
                  s3 = peg$c51;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e57); }
                }
              }
            }
          }
        }
      }
    }
    if (s3 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f31(s1, s2, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSHARP() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$r6.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f32();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFLAT() {
    var s0, s1;

    s0 = peg$currPos;
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f33();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCHORD_QUALITY() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseMIN7();
    if (s2 === peg$FAILED) {
      s2 = peg$parseMAJ7();
      if (s2 === peg$FAILED) {
        s2 = peg$parseMAJ_LONG();
        if (s2 === peg$FAILED) {
          s2 = peg$parseMIN_LONG();
          if (s2 === peg$FAILED) {
            s2 = peg$parseSEVENTH_SUS4();
            if (s2 === peg$FAILED) {
              s2 = peg$parseSEVENTH_SUS2();
              if (s2 === peg$FAILED) {
                s2 = peg$parseSUS4();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseSUS2();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseDIM_TRIAD();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseAUG();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseTHIRTEENTH();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parseELEVENTH();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parseNINTH();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parseSEVENTH();
                              if (s2 === peg$FAILED) {
                                s2 = peg$parseSIXTH();
                                if (s2 === peg$FAILED) {
                                  s2 = peg$parseMIN_SHORT();
                                  if (s2 === peg$FAILED) {
                                    s2 = peg$parseMAJ_SHORT();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseOMIT_N();
      if (s4 === peg$FAILED) {
        s4 = peg$parseADD_N();
        if (s4 === peg$FAILED) {
          s4 = peg$parseFLATTED_FIFTH();
          if (s4 === peg$FAILED) {
            s4 = peg$parseAUGMENTED_FIFTH();
          }
        }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseOMIT_N();
        if (s4 === peg$FAILED) {
          s4 = peg$parseADD_N();
          if (s4 === peg$FAILED) {
            s4 = peg$parseFLATTED_FIFTH();
            if (s4 === peg$FAILED) {
              s4 = peg$parseAUGMENTED_FIFTH();
            }
          }
        }
      }
      s2 = [s2, s3];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f34(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMAJ_LONG() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c52) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f35();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMAJ_SHORT() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 77) {
      s1 = peg$c53;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s1 === peg$FAILED) {
      s1 = '';
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f36();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMAJ7() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c54) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c55) {
        s1 = peg$c55;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e63); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9651) {
          s1 = peg$c56;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e64); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f37();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMIN_LONG() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c57) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f38();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMIN_SHORT() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 109) {
      s1 = peg$c58;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s1 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s1 = peg$c59;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e67); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f39();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMIN7() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c60) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e68); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c61) {
        s1 = peg$c61;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e69); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c62) {
          s1 = peg$c62;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e70); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f40();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSIXTH() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 54) {
      s1 = peg$c63;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e71); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSEVENTH() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 55) {
      s1 = peg$c64;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e72); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f42();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseNINTH() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 57) {
      s1 = peg$c65;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e73); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f43();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseELEVENTH() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c66) {
      s1 = peg$c66;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e74); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f44();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseTHIRTEENTH() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c67) {
      s1 = peg$c67;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f45();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSUS2() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c68) {
      s1 = peg$c68;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e76); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f46();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSUS4() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c69) {
      s1 = peg$c69;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e77); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f47();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSEVENTH_SUS2() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c70) {
      s1 = peg$c70;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f48();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSEVENTH_SUS4() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c71) {
      s1 = peg$c71;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e79); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f49();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDIM_TRIAD() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c72) {
      s1 = peg$c72;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e80); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f50();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAUG() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c73) {
      s1 = peg$c73;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f51();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFLATTED_FIFTH() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c74) {
      s1 = peg$c74;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e82); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c75) {
        s1 = peg$c75;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e83); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f52();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAUGMENTED_FIFTH() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c76) {
      s1 = peg$c76;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e84); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c77) {
        s1 = peg$c77;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e85); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f53();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOMIT_N() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c78;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 4) === peg$c79) {
      s2 = peg$c79;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }
    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 111) {
        s2 = peg$c80;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e88); }
      }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r8.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c81;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e90); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f54(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseADD_N() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c78;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e86); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 3) === peg$c82) {
      s2 = peg$c82;
      peg$currPos += 3;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e91); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e34); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c81;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e90); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f55(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINVERSION() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s2 = peg$c83;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e92); }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r9.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    peg$savedPos = s0;
    s1 = peg$f56();
    s0 = s1;

    return s0;
  }

  function peg$parseOCTAVE_OFFSET() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    if (input.charCodeAt(peg$currPos) === 39) {
      s2 = peg$c84;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c84;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e94); }
      }
    }
    s2 = [];
    if (input.charCodeAt(peg$currPos) === 44) {
      s3 = peg$c85;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e95); }
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      if (input.charCodeAt(peg$currPos) === 44) {
        s3 = peg$c85;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
    }
    peg$savedPos = s0;
    s0 = peg$f57(s1, s2);

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$r10.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r10.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e97); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e96); }

    return s0;
  }

  function peg$parseH() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = [];
    if (input.substr(peg$currPos, 3) === peg$c86) {
      s1 = peg$c86;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 8594) {
        s3 = peg$c87;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e100); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (input.substr(peg$currPos, 3) === peg$c86) {
        s1 = peg$c86;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e99); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 8594) {
          s3 = peg$c87;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e100); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s2 = [s2, s3, s4];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e98); }

    return s0;
  }

  function peg$parseMIDI_PROGRAM_CHANGE() {
    var s0;

    s0 = peg$parsePC048();
    if (s0 === peg$FAILED) {
      s0 = peg$parsePC049();
      if (s0 === peg$FAILED) {
        s0 = peg$parsePC052();
      }
    }

    return s0;
  }

  function peg$parsePC048() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c88) {
      s3 = peg$c88;
      peg$currPos += 7;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 8) === peg$c89) {
        s5 = peg$c89;
        peg$currPos += 8;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e102); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c90) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e103); }
        }
        if (s7 !== peg$FAILED) {
          s3 = [s3, s4, s5, s6, s7];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c88) {
        s3 = peg$c88;
        peg$currPos += 7;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e101); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 49) {
          s5 = peg$c90;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e104); }
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c91) {
          s3 = peg$c91;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 49) {
            s5 = peg$c90;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e104); }
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f58();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePC049() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c88) {
      s3 = peg$c88;
      peg$currPos += 7;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e101); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      if (input.substr(peg$currPos, 8) === peg$c89) {
        s5 = peg$c89;
        peg$currPos += 8;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e102); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        if (input.substr(peg$currPos, 1).toLowerCase() === peg$c92) {
          s7 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e106); }
        }
        if (s7 !== peg$FAILED) {
          s3 = [s3, s4, s5, s6, s7];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c88) {
        s3 = peg$c88;
        peg$currPos += 7;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e101); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 50) {
          s5 = peg$c92;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e107); }
        }
        if (s5 !== peg$FAILED) {
          s3 = [s3, s4, s5];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c91) {
          s3 = peg$c91;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e105); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 50) {
            s5 = peg$c92;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e107); }
          }
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f59();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePC052() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c93) {
      s2 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e108); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c94) {
        s2 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c95) {
          s2 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e110); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c96) {
            s2 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e111); }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f60();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


    let gKey = 0; // 0～11
    let gScale = "ionian";

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
